"Modeline and Notes
"vim: set foldmarker={{{,}}} foldlevel=0 spell:

"[Configured Key Bindings]
    " F2      paste toggle
    " F3      nerdtree toggle
    " F5      undotree toggle
    " F6      fzf toggle
    " F8      tagbar toggle
    " F9      remove all trailing whitespace
    " F10     selective remove of trailing whitespace
    " <C-n>   nerdtree toggle
    " <C-m>   nerdtree
    " :W      :w with sudo
    "
    " #### non leader mappings
    " H       :%s//gc               " find / replace
    " J       :m >+1
    " K       :m <-2
    " ghs     :GitGutterStageHunk
    " ghu     :GitGutterUndoHunk
    " ghp     :GitGutterPreviewHunks
    "
    " #### leader mappings
    " ,       leader key            " LEADER KEY
    " ,m      remove ^M when encodings get messed up
    " ,T      :enew<cr>             " new empty buffer
    " ,t      :enew<cr>             " new empty buffer
    " ,l      :bnext<CR>            " next buffer
    " ,h      :bprevious<CR>        " prev buffer
    " ,bq     close current buffer and move to prev
    " ,bl     :ls<cr>               " list buffers
    " ,1-9    switch to tab 1-9g
    " ,0      :tablast
    " ,h      :split                " horiz split
    " ,v      :vsplit               " vert split
    " ,f      :Buffers              " fzf list open buffers
    "
    " #### floaterm
    " ,ft     :FloatermNew          " new floaterm window
    " ,fn     :FloatermNext         " next floaterm window
    " ,fp     :FloatermPrev         " prev floaterm window
    " ,ff     :FloatermToggle       " toggle floaterm window
    "
    " #### vim-fugitive
    " ,ga     :Git add .            " git add .
    " ,gc     :Git commit           " git commit
    " ,gp     :Git push             " git push
    " ,gl     :Git pull             " git pull
    "
    " #### fold mappings
    " zc                            " close the current fold
    " zC                            " same as above but closes nested below
    " zo                            " opens current fold
    " zO                            " same as above but opens nested below
    " zm                            " closes one or more folds in the buffer
    " zM                            " closes all folds in buffer
    " za                            " toggle current fold open || closed
    " zA                            " same as above but toggle all folds below
    " zi                            " toggle folds if already folded

"[Basics] {{{
    set nocompatible                " explicitly get out of vi-compatible mode
    set noexrc                      " don't use local version of .(g)vimrc, .exrc
    set cpoptions=aABceFsmq
    "             |||||||||
    "             ||||||||+-- When joining lines, leave the cursor
    "             ||||||||     between joined lines
    "             |||||||+-- When a new match is created (showmatch)
    "             |||||||     pause for .5
    "             ||||||+-- Set buffer options when entering the
    "             ||||||     buffer
    "             |||||+-- :write command updates current file name
    "             ||||+-- Automatically add <CR> to the last line
    "             ||||     when using :@r
    "             |||+-- Searching continues at the end of the match
    "             |||     at the cursor position
    "             ||+-- A backslash has no special meaning in mappings
    "             |+-- :write updates alternative file name
    "             +-- :read updates alternative file name
    syntax on                       " syntax highlighting on
" }}}

"[General] {{{
    filetype plugin on              " load filetype plugins settings
    set autochdir                   " always switch to the current file directory
    set autoread                    " auto read when a file is changed from the outside
    set backspace=indent,eol,start  " make backspace a more flexible
    set backup                      " make backup files
    set backupdir=~/.vim/backup     " where to put backup files
    set clipboard+=unnamed          " share windows clipboard
    set directory=~/.vim/swap       " directory to place swap files in
    set fenc=utf-8                  " UTF-8
    set fileformats=unix,dos,mac    " support all three, in this order
    set hidden                      " you can change buffers without saving
    set history=1000                " how many lines of history VIM has to remember
    set iskeyword+=_,$,@,%,#        " none of these are word dividers
    set ml                          " set modelines
    set mouse=a                     " use mouse everywhere
    set noerrorbells                " don't make noise
    set pastetoggle=<F2>            " when insert mode, press f2 for paste mode
    " set spell                     " spell checking : http://tips.webdesign10.com/vim/how-use-vims-spellchecker
    set swapfile                    " enable swaps
    set tags=~/.vim/tags/           " tag usage
    set timeoutlen=300 ttimeoutlen=0 " mapping delays
    set undodir=~/.vim/undo         " persistent undo dir
    set undofile                    " persistent undo regardless of buffer unload
    set undolevels=1000             " many levels of undo
    set updatetime=50               " shorter update time
    set wildignore=*.dll,*.o,*.obj,*.bak,*.exe,*.pyc,*.jpg,*.gif,*.png " ignore these list file extensions
    set wildmenu                    " turn on command line completion wild style
    set wildmode=list:longest       " turn on wild mode huge list
    set whichwrap=b,s,h,l,<,>,~,[,] " everything wraps
    "             | | | | | | | | |
    "             | | | | | | | | +-- "]" Insert and Replace
    "             | | | | | | | +-- "[" Insert and Replace
    "             | | | | | | +-- "~" Normal
    "             | | | | | +-- <Right> Normal and Visual
    "             | | | | +-- <Left> Normal and Visual
    "             | | | +-- "l" Normal and Visual (not recommended)
    "             | | +-- "h" Normal and Visual (not recommended)
    "             | +-- <Space> Normal and Visual
    "             +-- <BS> Normal and Visual
" }}}

"[Vim UI] {{{
    colorscheme gruvbox
    set background=dark             " always keep background dark regardless of color theme
    set colorcolumn=80,120          " highlight maximum line length
    " highlight ColorColumn ctermbg=0 guibg=grey
    set cmdheight=2                 " space for displaying messages
    set cursorcolumn                " highlight the current column
    set cursorline                  " highlight current line
    set encoding=utf8               " Set utf8 as encoding and en_US as the language
    set hlsearch                    " highlight searched for phrases
    set incsearch                   " BUT do highlight as you type your search phrase
    set laststatus=2                " always show the status line
    set lazyredraw                  " do not redraw while running macros
    set linespace=0                 " don't insert any extra pixel lines betweens rows
    set list                        " we do what to show tabs, to ensure we get them out of my files
    set listchars=tab:>-,trail:-    " show tabs and trailing
    set matchtime=5                 " how many tenths of a second to blink matching brackets for
    set nostartofline               " leave my cursor where it was
    set novisualbell                " don't blink
    set number                      " turn on line numbers
    set numberwidth=5               " We are good up to 99999 lines
    set relativenumber              " show relative line number
    set report=0                    " tell us when anything is changed via :...
    set ruler                       " Always show current positions along the bottom
    set scrolloff=10                " Keep 10 lines (top/bottom) for scope
    set shortmess=aOstT             " shortens messages to avoid 'press a key' prompt
    set showcmd                     " show the command being typed
    set showmatch                   " show matching brackets
    set sidescrolloff=10            " Keep 5 lines at the size
    set t_Co=256                    " enables 256 colors
    set termguicolors               " support for colorscheme in ST
    set title                       " change the terminals title
    "set statusline=%F%m%r%h%w\ [Lines:%L]\ [Type:%{&ff}]\ %y\ [%p%%]\ [%04l,%04v]\ [FoldLevel:%{foldlevel('.')}]
    ""              | | | | |          |          |        |    |       |    |                 |
    ""              | | | | |          |          |        |    |       |    |                 + current foldlevel
    ""              | | | | |          |          |        |    |       |    + current column
    ""              | | | | |          |          |        |    |       +-- current line
    ""              | | | | |          |          |        |    +-- current % into file
    ""              | | | | |          |          |        +-- current syntax in square brackets
    ""              | | | | |          |          +-- current fileformat
    ""              | | | | |          +-- number of lines
    ""              | | | | +-- preview flag in square brackets
    ""              | | | +-- help flag in square brackets
    ""              | | +-- readonly flag in square brackets
    ""              | +-- rodified flag in square brackets
    ""              +-- full path to file in the buffer
" }}}

"[Text Formatting/Layout] {{{
    set completeopt=                " don't use a pop up menu for completions
    set expandtab                   " no real tabs please!
    set formatoptions=rq            " Automatically insert comment leader on return, and let gq format comments
    set ignorecase                  " case insensitive by default
    set infercase                   " case inferred by default
    set nowrap                      " do not wrap line
    set shiftround                  " when at 3 spaces, and I hit > ... go to 4, not 5
    set shiftwidth=4                " auto-indent amount when using cindent, >>, << and stuff like that
    set smartcase                   " if there are caps, go case-sensitive
    set softtabstop=4               " when hitting tab or backspace, how many spaces should a tab be (see expandtab)
    set tabstop=4                   " real tabs should be 8, and they will show with set list on
" }}}

"[Tabs] {{{
    set showtabline=2               " shows the tab bar at all times
    set tabpagemax=10               " maximum amount of tabs to open on startup
" }}}

"[Folding] {{{
    set foldenable                  " Turn on folding
    set foldlevel=100               " Don't autofold anything (but I can still fold manually)
    set foldmarker={{{,}}}              " Fold C style code (only use this as default if you use a high foldlevel)
    set foldmethod=marker           " Fold on the marker
    set foldopen=block,hor,mark,percent,quickfix,tag " what movements open folds
    function! SimpleFoldText() " {{{
        return getline(v:foldstart).' '
    endfunction " }
    set foldtext=SimpleFoldText()   " Custom fold text function (cleaner than default)
    au BufWinLeave * mkview
" }}}

"[Plugin Settings] {{{
    "vim-plug {{{
        call plug#begin()
        " undotree
        Plug 'mbbill/undotree'
        " gitgutter
        Plug 'airblade/vim-gitgutter'
        " vim fugitive
        Plug 'tpope/vim-fugitive'
        " syntax hilighting
        Plug 'dense-analysis/ale'
        " rainbow Parenthesis
        Plug 'frazrepo/vim-rainbow'
        " status bar
        Plug 'itchyny/lightline.vim'
        " Code Completion
        Plug 'neoclide/coc.nvim', {'branch': 'release'}
        Plug 'preservim/tagbar'
        " NERDTree
        Plug 'scrooloose/nerdtree'
        " Theme
        Plug 'morhetz/gruvbox'
        " Tabs
        Plug 'ap/vim-buftabline'
        " airline
        Plug 'vim-airline/vim-airline'
        " fzf
        Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
        Plug 'junegunn/fzf.vim'
        " floaterm
        Plug 'voldikss/vim-floaterm'
        call plug#end()
    "}}}

    "vim-plug {{{
        autocmd VimEnter *
          \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
          \|   PlugInstall --sync | q
          \| endif
    "}}}

    "Gruvbox {{{
        autocmd vimenter * ++nested colorscheme gruvbox
    "}}}

    "Rainbow Parenthesis {{{
        let g:rainbow_active = 1
    "}}}

    "NERDTree {{{
        " autocmd vimenter * NERDTreeToggle
        " autocmd vimenter * if !argc() | NERDTree | endif
        " autocmd VimEnter * wincmd p
        autocmd BufEnter * NERDTreeMirror
        let NERDTreeShowHidden = 1
        let g:NERDTreeWinSize = 35
        " auto quit nerdtree when buffers closed
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree")
            \ && b:NERDTree.isTabTree()) | q | endif
        " Store the bookmarks file
        let NERDTreeBookmarksFile=expand("$HOME/.vim-NERDTreeBookmarks")
        " nerdtree statusline
        let NERDTreeStatusline = "%{ getcwd() }"

        " Close NERDTree when closing the last buffer
        autocmd bufenter * if (winnr("$") == 1
            \ && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    "}}}

    "lightline {{{
        let g:lightline = { 'colorscheme': 'gruvbox', }
    "}}}

    "CoC Settings {{{
        " Use tab for trigger completion with characters ahead and navigate.
        " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
        " other plugin before putting this into your config.
        """inoremap <silent><expr> <TAB>
        """      \ pumvisible() ? "\<C-n>" :
        """      \ <SID>check_back_space() ? "\<TAB>" :
        """      \ coc#refresh()
        """inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

        function! s:check_back_space() abort
          let col = col('.') - 1
          return !col || getline('.')[col - 1]  =~# '\s'
        endfunction

        " Make <CR> to accept selected completion item or notify coc.nvim to format
        " <C-g>u breaks current undo, please make your own choice.
        inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
    "}}}

    "ale settings {{{
        " Fix files automatically on save
        let g:ale_fixers = {}
        let g:ale_javascript_eslint_use_global = 1
        let g:ale_linters = {
          \'javascript': ['eslint'],
          \'vue': ['eslint', 'stylelint', 'tsserver'],
        \}

        let g:ale_fixers = {
          \'javascript': ['prettier', 'eslint'],
          \'vue': ['eslint', 'stylelint'],
        \}

        let g:ale_linters_explicit = 1
        let g:ale_sign_column_always = 1
        let g:ale_sign_error = '>>'
        let g:ale_sign_warning = '--'
        let g:ale_fix_on_save = 1
    "}}}

    "vim airline {{{
        " Enable the list of buffers
        let g:airline#extensions#tabline#enabled = 1

        " Show just the filename
        let g:airline#extensions#tabline#fnamemod = ':t'
    "}}}

    "vim GitGutter {{{
        " gitgutter status line summary
        function! GitStatus()
          let [a,m,r] = GitGutterGetHunkSummary()
          return printf('+%d ~%d -%d', a, m, r)
        endfunction
        set statusline+=%{GitStatus()}
    "}}}

    "undotree {{{
        " windowlayout
        if !exists('g:undotree_WindowLayout')
            let g:undotree_WindowLayout = 1
        endif

        " e.g. using 'd' instead of 'days' to save some space.
        if !exists('g:undotree_ShortIndicators')
            let g:undotree_ShortIndicators = 0
        endif

        " undotree window width
        let g:undotree_SplitWidth = 40
        if !exists('g:undotree_SplitWidth')
            if g:undotree_ShortIndicators == 1
                let g:undotree_SplitWidth = 30
            else
                let g:undotree_SplitWidth = 35
            endif
        endif

        " tree node shape.
        if !exists('g:undotree_TreeNodeShape')
            let g:undotree_TreeNodeShape = '*'
        endif

        " tree vertical shape.
        if !exists('g:undotree_TreeVertShape')
            let g:undotree_TreeVertShape = '|'
        endif

        " tree split shape.
        if !exists('g:undotree_TreeSplitShape')
            let g:undotree_TreeSplitShape = '/'
        endif

        " tree return shape.
        if !exists('g:undotree_TreeReturnShape')
            let g:undotree_TreeReturnShape = '\'
        endif

        " Highlight changed text
        if !exists('g:undotree_HighlightChangedText')
            let g:undotree_HighlightChangedText = 1
        endif

        " Highlight changed text using signs in the gutter
        if !exists('g:undotree_HighlightChangedWithSign')
            let g:undotree_HighlightChangedWithSign = 1
        endif

        " Show cursorline
        if !exists('g:undotree_CursorLine')
            let g:undotree_CursorLine = 1
        endif

        " Highlight linked syntax type.
        " You may chose your favorite through ":hi" command
        if !exists('g:undotree_HighlightSyntaxAdd')
            let g:undotree_HighlightSyntaxAdd = "DiffAdd"
        endif
        if !exists('g:undotree_HighlightSyntaxChange')
            let g:undotree_HighlightSyntaxChange = "DiffChange"
        endif
        if !exists('g:undotree_HighlightSyntaxDel')
            let g:undotree_HighlightSyntaxDel = "DiffDelete"
        endif
    "}}}

    "fzf {{{
        " Initialize configuration dictionary
        let g:fzf_vim = {}

        " preview window in fzf
        let g:fzf_vim.preview_window = ['right,50%', 'ctrl-/']
    "}}}

    "floaterm {{{
        " Set floaterm window's background to black
        hi Floaterm guibg=black
        " Set floating window border line color to cyan
        " background to black
        hi FloatermBorder guibg=black guifg=cyan
    "}}}
" }}}

"[Formatting] {{{
    " [Bash / Shell Scripts] {{{
        " remove color columns in sh files
        autocmd BufRead,BufNewFile *.sh set colorcolumn=80

        " uglify chars past the 80 col limit
        au BufWinEnter *.sh let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)

        " adding shlibs to sh syntax hilighting
        au BufNewFile,BufRead *.shlib set filetype=sh
    "}}}

    " [Python] {{{
        let python_highlight_all=1
        highlight BadWhitespace ctermbg=red guibg=red
        " Display tabs at the beginning of a line in Python mode as bad.
        au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
        " Make trailing whitespace be flagged as bad.
        au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
        " remove colorcolumn
        autocmd BufRead,BufNewFile *.py set colorcolumn=9999
    "}}}
" }}}

"[Key mappings / bindings] {{{
    " mapping comma to leader key
    let mapleader=","

    " autoreload vimrc
    augroup reload_vimrc
        autocmd!
        autocmd BufWritePost $MYVIMRC source $MYVIMRC
    augroup END

    " no more up left right down keys. hjkl, motherfuckers.
    map <up> <nop>
    map <down> <nop>
    map <left> <nop>
    map <right> <nop>

    " Go to tab by number
    noremap <leader>1 1gt
    noremap <leader>2 2gt
    noremap <leader>3 3gt
    noremap <leader>4 4gt
    noremap <leader>5 5gt
    noremap <leader>6 6gt
    noremap <leader>7 7gt
    noremap <leader>8 8gt
    noremap <leader>9 9gt
    noremap <leader>0 :tablast<cr>

    " To open a new empty buffer
    nmap <leader>T :enew<cr>
    nmap <leader>t :enew<cr>

    " Move to the next buffer
    nmap <leader>l :bnext<CR>

    " Move to the previous buffer
    nmap <leader>h :bprevious<CR>

    " Close the current buffer and move to the previous one
    nmap <leader>bq :bp <BAR> bd #<CR>

    " Show all open buffers and their status
    nmap <leader>bl :ls<CR>

    " map split v and h split to ,v and ,h respectively
    nmap <leader>v :vsplit<CR>
    "nmap <leader>h :split<CR>

    " nerdtree
    map <C-n> :NERDTreeToggle<CR>
    map <C-m> :NERDTree<CR>
    nmap <silent> <F3> :NERDTreeToggle<CR>

    "Remove all trailing whitespace by pressing F9
    nnoremap <F9> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>
    "selective remove of trailing whitespace by pressing F10
    nnoremap <F10> :let _s=@/<Bar>:%s/;\s\+$/;/e<Bar>:let @/=_s<Bar><CR>

    "" map <C-P> :Files<CR>
    "map <F5> :setlocal spell! spelllang=en_US<CR>

    " Search and replace hotkey
    nnoremap H :%s//gc<left><left><left>

    " Move highlighted text up and down
    vnoremap J :m '>+1<CR>gv=gv
    vnoremap K :m '<-2<CR>gv=gv

    " GitGutter
    nmap ghs <Plug>(GitGutterStageHunk)
    nmap ghu <Plug>(GitGutterUndoHunk)
    nmap ghp <Plug>(GitGutterPreviewHunks

    " sudo save
    command W :execute ':silent w !sudo tee % > /dev/null' | :edit!

    " toggle undotree
    nnoremap <F5> :UndotreeToggle<CR>

    " toggle fzf
    nnoremap <F6> :Files<CR>

    " fzf list open buffers
    nnoremap <silent><leader>f :Buffers<CR>

    " floaterm
    nnoremap <silent><leader>ft :FloatermNew<CR>
    nnoremap <silent><leader>fn :FloatermNext<CR>
    nnoremap <silent><leader>fp :FloatermPrev<CR>
    nnoremap <silent><leader>ff :FloatermToggle<CR>

    " tagbar
    nmap <F8> :TagbarToggle<CR>

    "Remove the Windows ^M - when the encodings gets messed up
    noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

    " vim-fugutive
    "" git add .
    nmap <leader>ga :Git add .<CR>
    "" git commit
    nmap <leader>gc :Git commit<CR>
    "" git push
    nmap <leader>gp :Git push<CR>
    "" git pull
    nmap <leader>gl :Git pull<CR>
" }}}

"[Folder creations for mappings] {{{
    silent !mkdir ~/.vim/backup > /dev/null 2>&1
    silent !mkdir ~/.vim/swap > /dev/null 2>&1
    silent !mkdir ~/.vim/tags > /dev/null 2>&1
    silent !mkdir ~/.vim/tmp > /dev/null 2>&1
    silent !mkdir ~/.vim/undo > /dev/null 2>&1

    if !isdirectory(expand(&undodir))
        call mkdir(expand(&undodir), "p")
    endif
    if !isdirectory(expand(&backupdir))
        call mkdir(expand(&backupdir), "p")
    endif
    if !isdirectory(expand(&directory))
        call mkdir(expand(&directory), "p")
    endif
" }}}
