servers = (
  {
    address = "irc.freenode.net";
    chatnet = "freenode";
    port = "6697";
    password = "<PASSWORD>";
    use_ssl = "yes";
    ssl_verify = "yes";
    autoconnect = "yes";
  },
  {
    address = "irc.mzima.net";
    chatnet = "efnet";
    port = "9999";
    use_ssl = "yes";
    ssl_verify = "no";
    autoconnect = "yes";
  }
);

chatnets = {
  freenode = {
    type = "IRC";
    real_name = "<NICK1>";
    user_name = "<NICK1>";
    nick = "<NICK1>";
    alternate_nick = "<NICK2>";
  };
  efnet = {
    type = "IRC";
    real_name = "<NICK3>";
    user_name = "<NICK3>";
    nick = "<NICK3>";
    alternate_nick = "<NICK4>";
  };
};

channels = (
  { name = "#<ROOM1>";
    chatnet = "freenode";
    autojoin = "yes";
    password = "<PASSWORD>";
  },
  { name = "#<ROOM2>; chatnet = "freenode"; autojoin = "yes"; },
  { name = "#<ROOM1>"; chatnet = "efnet"; autojoin = "yes"; },
  {
    name = "#<ROOM2>";
    chatnet = "freenode";
    autojoin = "yes";
    password = "<PASSWORD>";
  }
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "who";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  Q = "QUERY";
  "MANUAL-WINDOWS" = "set use_status_window off;set autocreate_windows off;set autocreate_query_level none;set autoclose_windows off;set reuse_unused_windows on;save";
  EXEMPTLIST = "mode $C +e";
  ATAG = "WINDOW SERVER";
  UNSET = "set -clear";
  RESET = "set -default";
  1 = "window goto 1";
  2 = "window goto 2";
  3 = "window goto 3";
  4 = "window goto 4";
  5 = "window goto 5";
  6 = "window goto 6";
  7 = "window goto 7";
  8 = "window goto 8";
  9 = "window goto 9";
  10 = "window goto 10";
  11 = "window goto 11";
  12 = "window goto 12";
  13 = "window goto 13";
  14 = "window goto 14";
  15 = "window goto 15";
  16 = "window goto 16";
  17 = "window goto 17";
  18 = "window goto 18";
  19 = "window goto 19";
  20 = "window goto 20";
  21 = "window goto 21";
  22 = "window goto 22";
  23 = "window goto 23";
  24 = "window goto 24";
  25 = "window goto 25";
  26 = "window goto 26";
  27 = "window goto 27";
  28 = "window goto 28";
  29 = "window goto 29";
  30 = "window goto 30";
  31 = "window goto 31";
  32 = "window goto 32";
  33 = "window goto 33";
  34 = "window goto 34";
  35 = "window goto 35";
  36 = "window goto 36";
  37 = "window goto 37";
  38 = "window goto 38";
  39 = "window goto 39";
  40 = "window goto 40";
  41 = "window goto 41";
  42 = "window goto 42";
  43 = "window goto 43";
  44 = "window goto 44";
  45 = "window goto 45";
  46 = "window goto 46";
  47 = "window goto 47";
  48 = "window goto 48";
  49 = "window goto 49";
  50 = "window goto 50";
  51 = "window goto 51";
  52 = "window goto 52";
  53 = "window goto 53";
  54 = "window goto 54";
  55 = "window goto 55";
  56 = "window goto 56";
  57 = "window goto 57";
  58 = "window goto 58";
  59 = "window goto 59";
  60 = "window goto 60";
  61 = "window goto 61";
  62 = "window goto 62";
  63 = "window goto 63";
  64 = "window goto 64";
  65 = "window goto 65";
  66 = "window goto 66";
  67 = "window goto 67";
  68 = "window goto 68";
  69 = "window goto 69";
  70 = "window goto 70";
  71 = "window goto 71";
  72 = "window goto 72";
  73 = "window goto 73";
  74 = "window goto 74";
  75 = "window goto 75";
  76 = "window goto 76";
  77 = "window goto 77";
  78 = "window goto 78";
  79 = "window goto 79";
  80 = "window goto 80";
  81 = "window goto 81";
  82 = "window goto 82";
  83 = "window goto 83";
  84 = "window goto 84";
  85 = "window goto 85";
  86 = "window goto 86";
  87 = "window goto 87";
  88 = "window goto 88";
  89 = "window goto 89";
  90 = "window goto 90";
  91 = "window goto 91";
  92 = "window goto 92";
  93 = "window goto 93";
  94 = "window goto 94";
  95 = "window goto 95";
  96 = "window goto 96";
  97 = "window goto 97";
  98 = "window goto 98";
  99 = "window goto 99";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$tag/$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://www.irssi.org";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
        usercount = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};

settings = {
  core = {
    rawlog_lines = "1000";
    real_name = "<REAL NAME>";
    user_name = "<USER NAME>";
    nick = "<NICK>";
    hostname = "<HOSTNAME>
  };
  "fe-text" = { actlist_sort = "refnum"; };
  "fe-common/core" = {
    theme = "mine.theme";
    autolog = "yes";
    autolog_colors = "yes";
    max_command_history = "1000";
    window_history = "yes";
  };
  "perl/core/scripts" = {
    awl_block = "-16";
    awl_sbar_maxlength = "yes";
    awl_maxlines = "5";
    awl_display_key = "$Q| $H$C$S";
    awl_display_nokey = "[$N]$H$C$S";
    awl_display_key_active = "$Q| $H%U$C%n";
    nicklist_automode = "OFF";
    awl_shared_sbar = "OFF";
    awl_viewer = "no";
  };
};

logs = { };

ignores = (
  {
    level = "MODES JOINS PARTS QUITS NICKS";
    channels = ( "#<ROOM1>" );
  }
);

hilights = (
  { text = "<NICK1>"; nick = "yes"; word = "yes"; },
  { text = "<NICK2>"; nick = "yes"; word = "yes"; },
  { text = "<NICK3>"; nick = "yes"; word = "yes"; },
  { text = "<NICK4>"; nick = "yes"; word = "yes"; },
);

windows = {
  1 = { immortal = "yes"; name = "(status)"; level = "ALL"; };
  2 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#<ROOM1>";
        tag = "freenode";
      }
    );
  };
  3 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#<ROOM2>";
        tag = "freenode";
      }
    );
  };
  4 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#<ROOM1>";
        tag = "efnet";
      }
    );
  };
  5 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#<ROOM2>";
        tag = "efnet";
      }
    );
  };
};

mainwindows = { 1 = { first_line = "1"; lines = "70"; }; };
